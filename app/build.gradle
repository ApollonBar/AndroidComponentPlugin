apply plugin: 'com.android.application'
apply plugin: 'project-report'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        applicationId "com.malin.hook"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha01'
}

//因为 Gradle 的依赖发生冲突的时候, 会解决冲突, 默认是使用最高的版本,
// 但是也会因为 force 字段的关系选择较低的版本,我们往往需要知道打到APK里面依赖的具体版本.
project.getGradle().addBuildListener(new BuildListener() {

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        project.android.applicationVariants.each { variant ->
            if (variant.getAssemble().state.executed) {
                if (this.gradle.gradleVersion >= "4.1") {
                    // android plugin 3.0 以上
                    def runtime = project.configurations.create("d_analyse" + variant.runtimeConfiguration.name);
                    runtime.setCanBeConsumed(false);
                    runtime.extendsFrom(variant.runtimeConfiguration);
                    runtime.getAttributes().attribute(Attribute.of("artifactType", String.class), "jar")
                    variant.runtimeConfiguration.getAttributes().keySet().forEach({
                        runtime.getAttributes().attribute(it, variant.runtimeConfiguration.getAttributes().getAttribute(it));
                    })
                    println("${variant.name}  analyse")
                    println("runtime dependency ")
                    println("------------------")
                    runtime.resolvedConfiguration.resolvedArtifacts.forEach({
                        def id = it.moduleVersion.id;
                        println(id.group + ":" + id.name + ":" + id.version)
                    })
                    println("------------------\n ")
                    def packageC = project.configurations.create("d_analyse_" + variant.compileConfiguration.name);
                    packageC.setCanBeConsumed(false);
                    packageC.extendsFrom(variant.compileConfiguration);
                    packageC.getAttributes().attribute(Attribute.of("artifactType", String.class), "jar")
                    variant.compileConfiguration.getAttributes().keySet().forEach({
                        packageC.getAttributes().attribute(it, variant.compileConfiguration.getAttributes().getAttribute(it));
                    })
                    println("package dependency ")
                    println("------------------")
                    packageC.resolvedConfiguration.resolvedArtifacts.forEach({
                        def id = it.moduleVersion.id;
                        println(id.group + ":" + id.name + ":" + id.version)
                    })
                    println("------------------\n ")
                    println("\n ")

                } else {
                    // android plugin 3.0  以下
                    def appPlugin = project.plugins.findPlugin("com.android.application");
                    appPlugin.variantManager.variantDataList.forEach({
                        def variantDependencies = it.variantDependency;

                        if (variant.name == variantDependencies.name) {
                            println("${variant.name}  analyse")
                            def runtime = project.configurations.create("d_analyse" + variantDependencies.compileConfiguration.name);
                            runtime.setCanBeConsumed(false)
                            runtime.extendsFrom(variantDependencies.compileConfiguration);
                            println("runtime dependency ")
                            println("------------------")
                            runtime.resolvedConfiguration.resolvedArtifacts.forEach({
                                def id = it.moduleVersion.id;
                                println(id.group + ":" + id.name + ":" + id.version)
                            })
                            println("------------------\n ")

                            def packageC = project.configurations.create("d_analyse" + variantDependencies.packageConfiguration.name);
                            packageC.setCanBeConsumed(false)
                            packageC.extendsFrom(variantDependencies.packageConfiguration);
                            println("package dependency ")
                            println("------------------")
                            packageC.resolvedConfiguration.resolvedArtifacts.forEach({
                                def id = it.moduleVersion.id;
                                println(id.group + ":" + id.name + ":" + id.version)
                            })
                            println("------------------\n ")
                            println("\n ")
                        }
                    })
                }
            }
        }
    }
})
